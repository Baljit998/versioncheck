named user.py, appears to be part of the Frappe Drive application and contains functions related to managing users, roles, and permissions. Let's break down the code:
get_users_with_drive_user_role_and_groups Function:

python

@frappe.whitelist()
def get_users_with_drive_user_role_and_groups(txt=""):
    # Fetch users with the "Drive User" role and user groups
    try:
        drive_groups = frappe.get_all("User Group")
        drive_users = frappe.get_all(
            doctype="User",
            filters=[
                ["Has Role", "role", "=", "Drive User"],
                ["full_name", "like", f"%{txt}%"],
            ],
            fields=[
                "email",
                "full_name",
                "user_image",
            ],
        )
        return drive_users + drive_groups

    except Exception as e:
        frappe.log_error("Error in fetching Drive Users: {0}".format(e))
        return {
            "status": "error",
            "message": "An error occurred while fetching Drive Users",
        }

get_users_with_drive_user_role Function:

python

@frappe.whitelist()
def get_users_with_drive_user_role(txt=""):
    # Fetch users with the "Drive User" role
    try:
        drive_users = frappe.get_all(
            doctype="User",
            filters=[
                ["Has Role", "role", "=", "Drive User"],
                ["full_name", "like", f"%{txt}%"],
            ],
            fields=[
                "email",
                "full_name",
                "user_image",
            ],
        )
        return drive_users

    except Exception as e:
        frappe.log_error("Error in fetching Drive Users: {0}".format(e))
        return {
            "status": "error",
            "message": "An error occurred while fetching Drive Users",
        }

get_all_users_on_site Function:

python

@frappe.whitelist()
def get_all_users_on_site():
    # Fetch all users on the site
    try:
        has_rw_access = has_read_write_access_to_doctype(frappe.session.user, "User")
        if not has_rw_access:
            return {
                "status": "error",
                "message": "You do not have permission to access this resource",
            }

        site_users = frappe.get_all(
            doctype="User",
            fields=[
                "username",
                "email",
                "full_name",
            ],
        )

        return site_users

    except Exception as e:
        frappe.log_error("Error in fetching Drive Users: {0}".format(e))
        return {
            "status": "error",
            "message": "An error occurred while fetching Drive Users",
        }

add_drive_user_role Function:

python

@frappe.whitelist()
def add_drive_user_role(user_id):
    # Add the "Drive User" role to a user
    has_rw_access = has_read_write_access_to_doctype(frappe.session.user, "User")

    if not has_rw_access:
        return {
            "status": "error",
            "message": "You do not have permission to access this resource",
        }

    drive_user = frappe.db.exists("User", {"name": ("like", f"%{user_id}%")})

    if not drive_user:
        return {"status": "error", "message": "User with given email does not exist"}

    user_role_exists = frappe.db.exists("Has Role", {"parent": user_id, "role": "Drive User"})

    if user_role_exists is not None:
        return {
            "status": "error",
            "message": "User already has the said Role permissions ",
        }

    usr = frappe.get_doc("User", user_id)

    usr.add_roles("Drive User")

    return {"status": "success", "message": "Drive User role has been successfully added"}

remove_drive_user_role Function:

python

@frappe.whitelist()
def remove_drive_user_role(user_id):
    # Remove the "Drive User" role from a user
    has_rw_access = has_read_write_access_to_doctype(frappe.session.user, "User")

    if not has_rw_access:
        return {
            "status": "error",
            "message": "You do not have permission to access this resource",
        }

    drive_user = frappe.db.exists("User", {"name": ("like", f"%{user_id}%")})

    if not drive_user:
        return {"status": "error", "message": "User with given email does not exist"}

    user_role_exists = frappe.db.exists("Has Role", {"parent": user_id, "role": "Drive User"})

    if user_role_exists is None:
        return {
            "status": "error",
            "message": "User does not have Drive User as a role applied ",
        }

    usr = frappe.get_doc("User", user_id)

    usr.remove_roles("Drive User")

    return {
        "status": "success",
        "message": "Drive User role has been successfully removed",
    }

has_read_write_access_to_doctype Function:

python

def has_read_write_access_to_doctype(user_id, doctype_name):
    # Check if a user has both read and write access to a DocType
    try:
        if frappe.has_permission(doctype_name, user=user_id, ptype="read"):
            if frappe.has_permission(doctype_name, user=user_id, ptype="write"):
                return True
    except frappe.PermissionError:
        pass

    return False

mark_as_viewed Function:

python

def mark_as_viewed(entity_name):
    # Mark an entity as viewed by a user
    entity_log = frappe.db.get_value(
        "Drive Entity Log", {"entity_name": entity_name, "user": frappe.session.user}
    )
    if entity_log:
        frappe.db.set_value(
            "Drive Entity Log", entity_log, "last_interaction", now(), update_modified=False
        )
        return
    doc = frappe.new_doc("Drive Entity Log")
    doc.entity_name = entity_name
    doc.user = frappe.session.user
    doc.last_interaction = now()
    doc.insert()
    return doc

is_drive_admin Function:

python

@frappe.whitelist()
def is_drive_admin():
    # Check if the user is a Drive Admin
    user = frappe.session.user
    if user != "Guest":
        if user == "Administrator" or frappe.db.exists(
            "Has Role", {"parent": user, "role": "Drive Admin"}
        ):
            return True
    return False

Explanation:

    The script contains functions for retrieving users with specific roles, adding and removing the "Drive User" role, checking permissions, and marking entities as viewed by users.
    Authorization checks are performed to ensure that only users with the appropriate permissions can perform certain actions.
    The is_drive_admin function checks if a user is a Drive Admin based on their roles.

Overall, this script is essential for managing user roles and permissions within the Frappe Drive application.
